generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DOKTER
  FARMASI
  STAFF
}

enum QueueStatus {
  WAITING_CONSULTATION
  IN_CONSULTATION
  WAITING_MEDICATION
  WAITING_PAYMENT
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id          String        @id @default(uuid()) @db.Uuid
  username    String        @db.VarChar(100)
  role        UserRole
  email       String        @unique @db.VarChar(100)
  password    String        @db.VarChar(100)
  token       String?       @db.VarChar(255)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  CareSession CareSession[]

  @@map("users")
}

model Drug {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  amount_sold Int         @default(0)
  unit        String      @db.VarChar(50)
  price       Int
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  DrugOrder   DrugOrder[]

  @@map("drugs")
}

model Room {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  CareSession CareSession[]

  @@map("rooms")
}

model Patient {
  id                    String        @id @default(uuid()) @db.Uuid
  medical_record_number String?       @unique @db.VarChar(16)
  nik                   String        @unique @db.VarChar(16)
  name                  String        @db.VarChar(255)
  birth_date            DateTime      @db.Date
  address               String        @db.VarChar(255)
  gender                Gender
  occupation            String        @db.VarChar(100)
  phone_number          String        @db.VarChar(50)
  email                 String?       @db.VarChar(100)
  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
  CareSession           CareSession[]

  @@map("patients")
}

model CareSession {
  id           Int         @id @default(autoincrement())
  status       QueueStatus
  complaints   String      @db.VarChar(255)
  patient_id   String      @db.Uuid
  doctor_id    String      @db.Uuid
  room_id      Int
  queue_number String      @db.VarChar(10)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  patient              Patient                @relation(fields: [patient_id], references: [id])
  doctor               User                   @relation(fields: [doctor_id], references: [id])
  room                 Room                   @relation(fields: [room_id], references: [id])
  DrugOrder            DrugOrder[]
  VitalSign            VitalSign?
  CareSessionDiagnosis CareSessionDiagnosis[]
  SessionTreatment     SessionTreatment[]

  @@unique([queue_number, created_at])
  @@map("care_sessions")
}

model DrugOrder {
  id              Int      @id @default(autoincrement())
  care_session_id Int
  drug_id         Int
  quantity        Int
  dose            String   @db.VarChar(255)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  careSession CareSession @relation(fields: [care_session_id], references: [id], onDelete: Cascade)
  drug        Drug        @relation(fields: [drug_id], references: [id])

  @@map("drug_orders")
}

model VitalSign {
  id                   Int      @id @default(autoincrement())
  care_session_id      Int      @unique
  height_cm            Decimal  @db.Decimal(5, 2)
  weight_kg            Decimal  @db.Decimal(5, 2)
  body_temperature_c   Decimal  @db.Decimal(4, 2)
  blood_pressure       String   @db.VarChar(15)
  heart_rate_bpm       Int
  respiratory_rate_bpm Int
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  careSession CareSession @relation(fields: [care_session_id], references: [id], onDelete: Cascade)

  @@map("vital_signs")
}

model Diagnosis {
  id   String @id
  name String

  CareSessionDiagnosis CareSessionDiagnosis[]

  @@map("diagnoses")
}

model CareSessionDiagnosis {
  care_session_id Int
  diagnosis_id    String

  careSession CareSession @relation(fields: [care_session_id], references: [id], onDelete: Cascade)
  diagnosis   Diagnosis   @relation(fields: [diagnosis_id], references: [id], onDelete: Cascade)

  @@id([care_session_id, diagnosis_id])
  @@map("care_session_diagnoses")
}

model Treatment {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  price            Int
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  SessionTreatment SessionTreatment[]

  @@map("treatments")
}

model SessionTreatment {
  care_session_id Int
  treatment_id    Int
  applied_price   Int      @default(0)
  quantity        Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  careSession CareSession @relation(fields: [care_session_id], references: [id], onDelete: Cascade)
  penanganan  Treatment   @relation(fields: [treatment_id], references: [id])

  @@id([care_session_id, treatment_id])
  @@map("session_treatments")
}
